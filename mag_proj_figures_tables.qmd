---
title: "mag_proj_figures_tables"
format: html
editor: visual
---

```{r libraries}
library(cluster)
library(pheatmap)
library("PoiClaClu")
library(tidyverse)
library(lubridate)
library(ape)
library(vegan)
library(cowplot)
library(feather)
library(ggConvexHull) 
library(viridis)
library(rain) 
library(Hmisc)
library(RColorBrewer)
library(ggrepel)
library(patchwork)
```

```{r colours}
GEOM_COL_COLOURS = c(
  RColorBrewer::brewer.pal(12, name = 'Paired'))

SEASON_COLOURS = c("spring" = "#33A02C", "summer" = "#E31A1C",  "autumn" =  "#FF7F00", "winter" = "#1F78B4")

##Colours for phylum
```

```{r file_loading}
# Loading annotation file
  eggnog_names <- c("Geneid", "MAG", "contig", "Start", "End", "Strand", "Length", "seed_eggNOG_ortholog", "seed_ortholog_evalue", "seed_ortholog_score", "Predicted_taxonomic_group", "Predicted_protein_name", "Gene_Ontology_terms", "EC_number", "KEGG_ko", "KEGG_Pathway", "KEGG_Module", "KEGG_Reaction", "KEGG_rclass", "BRITE", "KEGG_TC", "CAZy", "BiGG Reaction", "tax_scope:eggNOG_taxonomic_level_used_for_annotation", "eggNOG_OGs", "bestOG", "COG_Functional_Category", "eggNOG_free_text_description", "sample", "counts")
  
  eggnog_table <- read_tsv("../data/eggnog_table_long.tsv.gz", col_types = cols(Start = col_integer(), End = col_integer(), Length = col_integer(), counts = col_integer(), X7 = col_character())) %>%
                             separate(Chr, c("MAG", "contig"), sep ="_k", remove = TRUE)
  eggnog_table$sample <- sub('.non_rRNA.pe.bowtie2.q5', '', eggnog_table$sample)
   eggnog_table$sample <- sub('.ca.pesickle.pe.bowtie2.sorted.unmappedpairs.pe.bowtie2.q5', '', eggnog_table$sample) 
   eggnog_table$sample <- sub('.lane00[0-9].ca.pesickle.pe.bowtie2.q5', '', eggnog_table$sample) 
   eggnog_table$sample <- sub("^", "P", eggnog_table$sample)
   eggnog_table$sample <- sub("PP", "P", eggnog_table$sample)
   eggnog_table$sample <- sub(".sorted.bam", "", eggnog_table$sample)
   
   colnames(eggnog_table) <- eggnog_names
   
   # Loading date file/sample key
   lmo_id_date <- read_tsv("../data/lmo_id_date.tsv.gz") %>%
    dplyr::select("Sample", 2) %>% 
    dplyr::rename(dates=2) %>%
    dplyr::rename(sample="Sample") %>%
    mutate(season = ifelse(grepl("201[0-9]-0[3-5]-", dates), "spring",
                           ifelse(grepl("201[0-9]-0[6-8]-", dates), "summer",
                                  ifelse(grepl("201[0-9]-09-|201[0-9]-10-|201[0-9]-11-", dates), "autumn", "winter")))) %>%
    mutate(filter_frac = ifelse(grepl("201[2-5]", dates), "filtered", "unfiltered")) %>%
    mutate(year = str_extract(dates, "[0-9][0-9][0-9][0-9]"))
  lmo_id_date$sample <- sub('P12052_1', 'P12052_3', lmo_id_date$sample) 
  
  #Taxonomy file
  BACL_taxonomy <- read_tsv("../data/BACL_identities.tsv.gz") %>%
    separate("Taxonomy", c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = ";[a-z]__", remove = T) %>%
    mutate(location = ifelse(grepl("*P2236*",MAG ), "redox",
                             ifelse(grepl("*P1994*", MAG), "transect",
                                    ifelse(grepl("*SRR*", MAG), "askö", "LMO"))))
  
  # Orf-file
  cds_table<- read_tsv("../data/cds_counts_filtered.tsv")
  
  
  # Metadata
  lmo_fc <- read_tsv("../data/LMO_FC_2016_17.tsv.gz", col_types = cols(.default = col_number(), Date =col_datetime(), Replicate = col_character(), FCS_file = col_character())) %>%
  rename(cells_mL = "cells/mL") %>%
  rename(dates ="Date")

lmo_fc_average <- lmo_fc %>%
  group_by(dates) %>%
  summarise(mean_cells_mL = mean(cells_mL)) %>%
  ungroup()

lmo_metadata <- read_tsv("../data/LMO_metadata1.tsv.gz", col_types = cols(.default = col_number(), Chla_Average = col_number(), Date = col_datetime())) %>% subset(Date > "2016-01-01" & Date < "2017-12-31") %>%
  rename(dates = "Date")

lmo_metadata_fc <- lmo_metadata %>%
  left_join(lmo_fc_average, by = "dates") %>%
  gather(variable, value, 3:37, na.rm = TRUE)

lmo_metadata_fc$dates <- as.Date(lmo_metadata_fc$dates)

  totala_reads_2016 <- read_feather("../../../LMO.metaT.non-polyA.norRNA.2016.feather") %>%
    group_by(sample) %>%
    summarise(counts =sum(count)) %>%
    ungroup()
  
  totala_reads_2017 <- read_feather("../../../LMO.metaT.non-polyA.norRNA.2017.feather") %>%
     group_by(sample) %>%
    summarise(counts =sum(count)) %>%
    ungroup()
  
  totala_reads <- totala_reads_2016 %>% rbind(totala_reads_2017) %>%
    rename(total_reads = "counts")
```

# Figure S1

```{r}
TEXT_SIZE = 9
lmo_metadata_fc %>%
  filter(variable %in%  c("Chla_Average", "Temperature_C", "mean_cells_mL")) %>%
  ggplot(mapping = aes(x = dates, y = value)) +
  geom_line(aes(color = variable, linetype = variable )) +
  scale_x_date(date_breaks = "1 month", date_labels = "%Y %m",
    limit=c(as.Date("2016-01-01"),as.Date("2017-12-30"))) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1)) +
  facet_wrap(~variable, scale = "free", ncol = 1) +
  #ggsave("../results/background_LMO.png") +
  ggtitle("Figure 3 Chla, DOC, Cells/mL") 


# Alternative with temp + inorganic nutrients + chla + cell abundance
variable_names <- list(
    'Chla_Average'= 'Chl *a* (µg L<sup>-1</sup>)',
  'Temperature_C'="Temperature (\u00b0C)",
  'mean_cells_mL'= "Cells mL<sup>-1</sup>",
  'Nitrate_Average'=bquote("Nitrate (µM)"),
  'Phosphate_Average'=bquote('Phosphate (µM)')
)

variable_labeller <- function(variable,value){
  return(variable_names[value])
}

lmo_metadata_fc %>%
  filter(variable %in%  c("Chla_Average", "Temperature_C", "mean_cells_mL", "Nitrate_Average","Phosphate_Average")) %>%
  ggplot(mapping = aes(x = dates, y = value)) +
  geom_line() +
  theme_bw() +
  #scale_x_date(breaks =  unique(c(
  #  str_replace(unique(lmo_metadata_fc$dates)[-c(1,2,length(unique(lmo_metadata_fc$dates)))],"[0-9][0-9]$","01") %>% unique(.),
   # as.character(unique(lmo_metadata_fc$dates)[c(1,length(unique(lmo_metadata_fc$dates)))]), "2017-09-01")) %>% as.Date(.),
    #limit=c(as.Date("2016-03-15"),as.Date("2017-12-12"))) +
  scale_x_date(date_labels = "%Y %m %d", date_breaks = "2 months") +
  theme(axis.text.x = element_text(angle = 60, hjust = 1), legend.position = "bottom",
        axis.text = element_text(size = TEXT_SIZE, colour = "black"),
        strip.text = element_markdown(size = TEXT_SIZE)
        ) +
  facet_wrap(variable ~ ., labeller=variable_labeller, scale = "free") +
   scale_x_date(date_breaks = "2 months", date_labels = "%Y%b") +
  ylab("") +
  xlab("Dates")
  ggsave("../results/LMO_background_alternative.png", width = 16, height = 12, unit = "cm")
```

# Figure 2

## NMDS

```{r}
TEXT_SIZE = 10

mag.wide <- cds_table %>% 
  inner_join(lmo_id_date, by = "sample") %>%
  filter(filter_frac == "unfiltered") %>%
  group_by(dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  select(-t) %>%
  group_by(MAG, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  select(MAG, dates, tpm) %>%
  spread(MAG, tpm, fill = 0) %>%
  remove_rownames() %>%
  column_to_rownames(var="dates")

#Transform the tpm
mag.wide.hellinger <- decostand(mag.wide, method = "hellinger")

#Do the meta nmds, stress = 0.05
meta.nmds.mag <- metaMDS(mag.wide.hellinger, k=2, trymax = 50, autotransform = T, trace = FALSE)
meta.nmds.mag

#Dataset prepared so that the expression can be divided into seasons
lmo_date_prep <- lmo_id_date %>% filter(filter_frac == "unfiltered") %>% distinct(dates, .keep_all = T) %>% inner_join(lmo_metadata_fc, by = "dates") %>%
  spread(variable,value) %>% arrange(dates)

attach(lmo_date_prep)


 
 
 nmds_df <- as.data.frame(meta.nmds.mag$points) %>%
                        rownames_to_column("dates") 
                        
nmds_df$dates <- as.Date(nmds_df$dates)  

lmo_id_date$dates <- gsub("^[0-9][0-9]","", lmo_id_date$dates)
lmo_id_date$dates <- as.character(lmo_id_date$dates)
  
nmds_df$dates <- gsub("^[0-9][0-9]","", nmds_df$dates)
nmds_df$dates <- as.character(nmds_df$dates)  

lmo_date_prep$dates <- gsub("^[0-9][0-9]","", lmo_date_prep$dates)
lmo_date_prep$dates <- as.character(lmo_date_prep$dates)

mapping_frac <- cds_table %>%
  group_by(sample) %>%
  summarise(counts = sum(counts)) %>%
  ungroup() %>%
  inner_join(totala_reads, by = "sample") %>%
  inner_join(lmo_id_date, by = "sample") %>%
  group_by(dates) %>%
  summarise(counts = mean(counts), total_reads = mean(total_reads)) %>%
  ungroup() %>%
  mutate(mapping_fracs = counts/total_reads) 


 plot1 <- nmds_df %>% inner_join(lmo_id_date %>% select(-sample) %>% distinct(dates, .keep_all = T), by = "dates")  %>% 
    inner_join(mapping_frac, by = "dates") %>%
  inner_join(lmo_date_prep %>% select(dates, Temperature_C), by = "dates") %>%
  ggplot(mapping = aes(x = MDS1, y = MDS2)) +
  geom_point(aes(colour = Temperature_C, shape = year, size = mapping_fracs )) +
  scale_colour_viridis() +
  geom_convexhull(data=nmds_df %>% inner_join(lmo_id_date, by = "dates"), aes(x=MDS1, y=MDS2, group=season, fill = season), alpha=0.2) +
  geom_text_repel(data = nmds_df, mapping = aes(x = MDS1, y = MDS2, label = dates), size = 2) +
  scale_fill_manual(values = SEASON_COLOURS) +
  xlab("NMDS 1") +
  ylab("NMDS 2") +
  theme_classic() +
  theme(panel.border = element_blank(),
        legend.title = element_text(size = TEXT_SIZE, face = "bold"),
        axis.text = element_text(size = TEXT_SIZE),
        axis.title = element_text(size = TEXT_SIZE),
        legend.text = element_text(size = TEXT_SIZE),
        legend.box.spacing = unit(-0.5, "mm"),
        legend.margin = margin(-0.5, 0, 0, 0)) +
  geom_text(x =-0.30, y = -0.5, label = paste0("stress =",round(meta.nmds.mag$stress,2)), size = 2)  +
  labs(color = "Temperature", shape = "Year") +
  coord_cartesian(clip = "off") +
 # theme(legend.title = element_text(size = 9), legend.text = element_text(size = 8),
  #      ) +
  guides(scale = "none", fill = "none") +
  labs(tag = "a",color = "Temperature", size = "Mapping Fraction", fill = "Season") 
 
plot1
ggsave("../results/Figure_2a.svg")
```

## Phyla contribution

```{r}

TEXT_SIZE = 10

phyla_cont <- cds_table %>%
  inner_join(lmo_id_date, by = "sample") %>%
  filter(filter_frac == "unfiltered") %>%
    group_by(dates) %>%
    mutate(t = counts/Length) %>%
    mutate(tpm = t/sum(t)*1e6) %>%
    ungroup() %>%
    select(-t) %>%
    inner_join(BACL_taxonomy, by = "MAG") %>%
    group_by(dates, Phylum) %>%
    summarise(tpm = sum(tpm)) %>%
    ungroup()

lmo_id_date <- read_tsv("../data/lmo_id_date.tsv.gz") %>%
    dplyr::select("Sample", 2) %>% 
    dplyr::rename(dates=2) %>%
    dplyr::rename(sample="Sample") %>%
    mutate(season = ifelse(grepl("201[0-9]-0[3-5]-", dates), "spring",
                           ifelse(grepl("201[0-9]-0[6-8]-", dates), "summer",
                                  ifelse(grepl("201[0-9]-09-|201[0-9]-10-|201[0-9]-11-", dates), "autumn", "winter")))) %>%
    mutate(filter_frac = ifelse(grepl("201[2-5]", dates), "filtered", "unfiltered")) %>%
    mutate(year = str_extract(dates, "[0-9][0-9][0-9][0-9]"))
  lmo_id_date$sample <- sub('P12052_1', 'P12052_3', lmo_id_date$sample) 

 p2 <-  cds_table %>%
  inner_join(lmo_id_date, by = "sample") %>%
  filter(filter_frac == "unfiltered") %>%
    group_by(dates) %>%
    mutate(t = counts/Length) %>%
    mutate(tpm = t/sum(t)*1e6) %>%
    ungroup() %>%
    select(-t) %>%
    inner_join(BACL_taxonomy, by = "MAG") %>%
    replace_na(list(Phylum = "NA")) %>%
    mutate(new_phylum = ifelse(grepl("Actinobacteria", Phylum), "Actinobacteria",
                        ifelse(grepl("Bacteroidetes", Phylum), "Bacteroidetes",
                        ifelse(grepl("Crenarchaeota", Phylum), "Crenarchaeota",
                        ifelse(grepl("Chloroflexi", Phylum), "Chloroflexi",
                        ifelse(grepl("Cyanobacteria", Phylum), "Cyanobacteria",
                        ifelse(grepl("Firmicutes", Phylum), "Firmicutes",
                        ifelse(grepl("Planctomycetes", Phylum), "Planctomycetes",
                        ifelse(grepl("Proteobacteria", Phylum), "Proteobacteria",
                        ifelse(grepl("Verrucomicrobia", Phylum), "Verrucomicrobia",
                        ifelse(grepl("Nitrospinae", Phylum), "Nitrospinae",
                        #ifelse(grepl("^NA$", Phylum), "NA", "Other")
                        "Other"
                        ))))))))))) %>%
    group_by(dates, new_phylum) %>%
    summarise(tpm = sum(tpm)) %>%
    ungroup() 
 
 plot2 <- p2 %>%
  ggplot(mapping = aes(x = dates, y = tpm/1000000, fill = fct_relevel(new_phylum, "Other", after = Inf))) +
  geom_area() +
  #scale_x_date(breaks =  unique(c(
  #  str_replace(unique(p2$dates)[-c(1,2,length(unique(p2$dates)))],"[0-9][0-9]$","01") %>% unique(.),
  #  as.character(unique(p2$dates)[c(1,length(unique(p2$dates)))]), "2017-09-01")) %>% as.Date(.),
  #  limit=c(as.Date("2016-03-15"),as.Date("2017-12-12"))) + 
  theme(#axis.text.x = element_text(angle = 60, hjust = 1, size = TEXT_SIZE, colour = "black"),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank(),
        axis.text.y = element_text(size = TEXT_SIZE, colour = "black"),
        axis.title = element_text(size = TEXT_SIZE),
        panel.grid = element_blank(),
        legend.title = element_text(size = TEXT_SIZE, face = "bold"),
        panel.background = element_blank(),
        legend.position = "bottom",
        legend.key.width = unit(0.3,"cm"), 
        legend.text = element_text(size = TEXT_SIZE),
        legend.key.height = unit(0.3, "cm")) +
  scale_fill_manual('Phylum', values = GEOM_COL_COLOURS) +
 # ggtitle("Taxonomic distribution of tpm across years") +
  scale_x_date(date_labels = "%Y %m %d", date_breaks = "2 months") +
 # scale_y_continuous(labels = function(x) format(x, scientific = TRUE)) +
  #xlab("Dates") +
  labs(tag = "b", y = expression(tpm~x~10^{6})) 

 
 plot2
 
 ggsave("../results/Figure_2b.svg")
```

## KEGG-cateries expression

```{r}
# Doing the big categories for metabolism

Carbohydrate_metabolism <- c("00010","00020","00030","00040","00051","00052","00053","00500","00520","00620","00630","00640","00650","00660","00562")

Energy_metabolism <- c("00190","00195","00196","00710","00720","00680","00910","00920")

Lipid_metabolism <- c("00061","00062","00071","00072","00073","00100","00120","00121","00140","00561","00564","00565","00600","00590","00591","00592","01040")

Nucleotide_metabolism <- c("00230", "00240") 

Amino_acid_metabolism<- c("00250","00260","00270","00280","00290","00300","00310","00220","00330","00340","00350","00360","00380","00400")

Metabolism_of_other_amino_acids<- c("00410","00430","00440","00450","00460","00471","00472","00473","00480")

Glycan_biosynthesis_and_metabolism <- c("00510","00513","00512","00515","00514","00532","00534","00533","00531","00563","00601","00603","00604","00540","00541","00550","00511","00571","00572")

Metabolism_of_cofactors_and_vitamins<- c("00730","00740","00750","00760","00770","00780","00785","00790","00670","00830","00860","00130")

Metabolism_of_terpenoids_and_polyketides<- c("00900","00902","00909","00904","00906","00905","00981","00908","00903","00281","01052","00522","01051","01059","01056","01057","00253","00523","01054","01053","01055")

Biosynthesis_of_other_secondary_metabolites <- c("00940","00945","00941","00944","00942","00943","00901","00403","00950","00960","01058","00232","00965","00966","00402","00311","00332","00261","00331","00521","00524","00525","00401","00404","00405","00333","00254","00999","00998","00997")

Xenobiotics_biodegradation_and_metabolism <- c("00362","00627","00364","00625","00361","00623","00622","00633","00642","00643","00791","00930","00363","00621","00626","00624","00365","00984","00980","00982","00983")

Chemical_structure_transformation_maps <- c("01010","01060","01061","01062","01063","01064","01065","01066","01070")

categories <- c("Carbohydrate_metabolism", "Energy_metabolism", "Lipid_metabolism", "Nucleotide_metabolism", "Amino_acid_metabolism", "Metabolism_of_other_amino_acids", "Glycan_biosynthesis_and_metabolism", "Metabolism_of_cofactors_and_vitamins", "Metabolism_of_terpenoids_and_polyketides", "Biosynthesis_of_other_secondary_metabolites", "Xenobiotics_biodegradation_and_metabolism", "Chemical_structure_transformation_maps")

#Creating the table with values for all kegg-categories
summarised_path_table <- cds_table %>% 
  inner_join(lmo_id_date, by = "sample") %>%
  filter(filter_frac == "unfiltered") %>%
  group_by(dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  select(-t) %>% # 3,850,468 rows
  inner_join(eggnog_table %>% distinct(Geneid, KEGG_Pathway), by = "Geneid") %>%
  separate_rows(KEGG_Pathway, sep = ",") %>%
  group_by(KEGG_Pathway, dates) %>% # Summarise the tpm for each date and pathway
  summarise(tpm = sum(tpm)) %>%
  ungroup() 

# Now mutating in the category names instead
plot3 <- summarised_path_table %>%
  mutate(Pathway = ifelse(grepl(paste(Amino_acid_metabolism, collapse = "|"), KEGG_Pathway),"Amino acid metabolism", 
                         ifelse(grepl(paste(Biosynthesis_of_other_secondary_metabolites, collapse = "|"), KEGG_Pathway),"Biosynthesis of other secondary metabolites", 
                        ifelse(grepl(paste(Carbohydrate_metabolism, collapse = "|"), KEGG_Pathway),"Carbohydrate metabolism",  
                        ifelse(grepl(paste(Energy_metabolism, collapse = "|"), KEGG_Pathway),"Energy metabolism",
                        ifelse(grepl(paste(Lipid_metabolism, collapse = "|"), KEGG_Pathway),"Lipid metabolism",
                        ifelse(grepl(paste(Nucleotide_metabolism, collapse = "|"), KEGG_Pathway),"Nucleotide metabolism",
                        ifelse(grepl(paste(Metabolism_of_other_amino_acids, collapse = "|"), KEGG_Pathway),"Metabolism of other amino acids",
                        ifelse(grepl(paste(Glycan_biosynthesis_and_metabolism, collapse = "|"), KEGG_Pathway),"Glycan biosynthesis and metabolism",
                        ifelse(grepl(paste(Metabolism_of_cofactors_and_vitamins, collapse = "|"), KEGG_Pathway),"Metabolism of cofactors and vitamins",
                        ifelse(grepl(paste(Metabolism_of_terpenoids_and_polyketides, collapse = "|"), KEGG_Pathway),"Metabolism of terpenoids and polyketides",
                        ifelse(grepl(paste(Xenobiotics_biodegradation_and_metabolism, collapse = "|"), KEGG_Pathway),"Xenobiotics biodegradation and metabolism",
                        ifelse(grepl(paste(Chemical_structure_transformation_maps, collapse = "|"), KEGG_Pathway),"Chemical structure transformation maps", "Other"
                               ))))))))))))) %>%
    group_by(Pathway, dates) %>% # Summarising for the broader pathways
    summarise(tpm = sum(tpm)) %>%
    ungroup() %>% 
    filter(Pathway != "Other") %>%
    group_by(dates) %>%
    mutate(rel_expression = tpm/sum(tpm)) %>%
    ungroup() %>%
  mutate(dates = as.Date(dates)) %>%
  ggplot(mapping = aes(x = dates, y = rel_expression, fill = Pathway)) +
  geom_area() +
   #scale_x_date(breaks =  unique(c(
   # str_replace(unique(p2$dates)[-c(1,2,length(unique(p2$dates)))],"[0-9][0-9]$","01") %>% unique(.),
   # as.character(unique(p2$dates)[c(1,length(unique(p2$dates)))]), "2017-09-01")) %>% as.Date(.),
   # limit=c(as.Date("2016-03-15"),as.Date("2017-12-12"))) +
  theme(legend.title = element_text(size = TEXT_SIZE, face = "bold"),
        #legend.text = element_text(size = TEXT_SIZE),
        legend.position = "bottom",
        axis.text.y = element_text(size = TEXT_SIZE),
        axis.title = element_text(size = TEXT_SIZE),
        axis.text.x = element_text(angle = 60, hjust = 1,size = TEXT_SIZE), 
        panel.grid = element_blank(),
        panel.background = element_blank(),
        legend.key.width = unit(0.3,"cm"), 
        legend.text = element_text(size = 8),
        legend.key.height = unit(0.3, "cm")
        ) +
  scale_fill_manual('Category', values = GEOM_COL_COLOURS) +
  theme(legend.key.width = unit(0.3,"cm"), legend.text = element_text(size = 8)) +
  scale_x_date(date_labels = "%Y %m %d", date_breaks = "2 months") +
  ylab("Relative expression (%)") +
  xlab("Dates") +
  guides(fill = guide_legend(ncol = 1)) +
  labs(tag = "c")

plot3

ggsave("../results/Figure_2c.svg")
```

## Energy metabolism

```{r}
#Energy metabolism
plot4 <- summarised_path_table %>%
  mutate(energy_metabolism = ifelse(grepl(paste(Energy_metabolism, collapse = "|"),KEGG_Pathway), KEGG_Pathway,"Other")) %>% 
  #filter(!is.na(energy_metabolism)) %>%   # Now mutate in the lower categories
  mutate(type_of_energy = ifelse(grepl("00190", energy_metabolism), "Oxidative phosphorylation", 
                          ifelse(grepl("00195", energy_metabolism), "Photosynthesis",
                          ifelse(grepl("00196", energy_metabolism), "Photosynthesis antenna proteins",
                          ifelse(grepl("00710", energy_metabolism), "Carbon fixation in photosynthetic organisms",
                          ifelse(grepl("00720", energy_metabolism), "Carbon fixation pathways in prokaryotes",
                          ifelse(grepl("00680", energy_metabolism), "Methane metabolism",
                          ifelse(grepl("00910", energy_metabolism), "Nitrogen metabolism",
                          ifelse(grepl("00920", energy_metabolism), "Sulfur metabolism", "other"))))))))) %>% 
  group_by(type_of_energy, dates) %>% # Summarising for the broader pathways
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  filter(type_of_energy != "other") %>%
    group_by(dates) %>%
    mutate(rel_expression = tpm/sum(tpm)) %>%
    ungroup() %>%
  mutate(dates = as.Date(dates)) %>%
  ggplot(mapping = aes(x = dates, y = rel_expression, fill = type_of_energy)) +
  geom_area() +
   #scale_x_date(breaks =  unique(c(
   # str_replace(unique(p2$dates)[-c(1,2,length(unique(p2$dates)))],"[0-9][0-9]$","01") %>% unique(.),
   # as.character(unique(p2$dates)[c(1,length(unique(p2$dates)))]), "2017-09-01")) %>% as.Date(.),
   #limit=c(as.Date("2016-03-15"),as.Date("2017-12-12"))) +
  theme(
    legend.title = element_text(size = TEXT_SIZE, face = "bold"),
        legend.text = element_text(size = TEXT_SIZE),
        legend.position = "bottom",
        axis.text.y = element_text(size = TEXT_SIZE),
        axis.title = element_text(size = TEXT_SIZE),
        axis.text.x = element_text(angle = 60, hjust = 1,size = TEXT_SIZE), 
        panel.grid = element_blank(),
        panel.background = element_blank()) +
  scale_fill_manual('Category', values = GEOM_COL_COLOURS) +
  scale_x_date(date_labels = "%Y %m %d", date_breaks = "2 months") +
  theme(legend.key.width = unit(0.3,"cm"), 
        legend.text = element_text(size = 8),
        legend.key.height = unit(0.3, "cm")) +
  ylab("Relative expression (%)" ) +
  xlab("Dates") +
  guides(fill = guide_legend(ncol = 1)) +
  labs(tag = "d")

plot4

ggsave("../results/Figure_2d.svg")
```

## Plot-combinatorics

```{r}
plot22 <- plot2 + theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title = element_blank())
plot22_legend <- get_legend(plot2)

plot33 <-  plot3 + theme(legend.position = "none") 
plot33_legend <- get_legend(plot3)

plot44 <- plot4 + theme(legend.position = "none")
plot44_legend <- get_legend(plot4)

layout <- c('
AABB
AABB
CCCC
DDEE
DDEE
FFGG
FFGG
')

plot1 + plot22 + 
plot22_legend + 
plot33 + plot44 +
plot33_legend +
plot44_legend +
plot_layout(ncol = 2, design = layout)

ggsave("../results/figure_2.png", width = 16, height = 24, units = "cm")
```

# Figure 4 - Transcriptional wave

```{r}
man_mag_order<- rev(c("P1994_108_bin102", "P6071_508_bin152", "SRR3727512_bin105","P4201_103_bin59", "P4201_116_bin52", "P4201_116_bin63","P1994_127_bin76","P1994_124_bin41","P6071_514_bin160","P6071_511_bin51", "P6071_526_bin59", "P4201_102_bin135", "P6071_517_bin195","SRR3727508_bin38",  "P6071_502_bin182", "P1994_121_bin104","P1994_121_bin230","P4201_101_bin152", "P4201_120_bin54", "P4201_103_bin31", "P2236_112_bin168", "P1994_122_bin236", "SRR3727505_bin154", "P4201_119_bin37", "P6071_532_bin163", "P1994_119_bin73", "P1994_122_bin109", "P4201_120_bin71", "P6071_514_bin159","P6071_511_bin252", "P4201_124_bin70", "P4201_106_bin4", "SRR3727521_bin101", "SRR3727512_bin93", "P1994_116_bin178", "P4201_120_bin144", "SRR3727525_bin46", "SRR3727503_bin31", "P4201_123_bin26", "P1994_106_bin43", "P6071_511_bin177", "SRR3727517_bin7", "P4201_112_bin101", "P4201_114_bin172", "P2236_102_bin110", "P1994_107_bin119", "P1994_129_bin89", "P4201_105_bin178","P6071_516_bin75","P6071_511_bin140"))
```

```{r}
# The vector with top50 MAGs
top50_mags <- cds_table %>%
  inner_join(lmo_id_date, by ="sample") %>%
  filter(filter_frac == "unfiltered") %>%
  group_by(dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  select(-t) %>%
  group_by(MAG) %>%
  summarise(sum_tpm = sum(tpm)) %>%
  ungroup() %>%
 # filter(MAG != c("P1994_125_bin49","P6071_505_bin209")) %>% #Excluding the similar MAGs
  arrange(desc(sum_tpm)) %>%
  mutate( 
    medsort_MAG = factor(MAG) %>% forcats::fct_reorder(sum_tpm, .desc = FALSE)) %>%
      slice(1:50) %>%
  .$MAG

top50_df <- cds_table %>%
  inner_join(lmo_id_date, by ="sample") %>%
  filter(filter_frac == "unfiltered") %>%
  group_by(dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  select(-t) %>%
  filter(MAG %in% top50_mags) %>%
  group_by(MAG, dates) %>%
  summarise(tpm = sum(tpm)) %>%
  ungroup() %>%
  inner_join(BACL_taxonomy %>% select(MAG, BACL), by = "MAG") %>%
  select(-MAG) %>%
  spread(BACL, tpm, fill = 0) %>%
  column_to_rownames("dates")

ann_row <- top50_df %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column("BACL") %>%
  inner_join(BACL_taxonomy, by = "BACL") %>%
  select(BACL, Phylum) %>%
  column_to_rownames("BACL") %>%
  replace(is.na(.),"unclassified") 

ann_col <- top50_df %>%
  as.data.frame() %>%
  rownames_to_column("dates") %>%
  mutate(dates = as.Date(dates)) %>%
  inner_join(lmo_id_date, by = "dates") %>%
  distinct(dates, season) %>%
  column_to_rownames("dates") %>%
  rename(Season = "season")

# For legends and colours in the pheatmap
#Var1 = GEOM_COL_COLOURS[c(7,3,6,2)]
Var1 = c("#E31A1C","#1F78B4","#33A02C", "#FF7F00" )
names(Var1) = c("summer","winter","spring","autumn")
Var2 = brewer.pal(11, "Paired")
names(Var2) = c(paste0(unique(ann_row$Phylum)))
annCol = list(Season = Var1[c(3,1,4,2)], Phylum = Var2) # Placing the legend order and coloring

  
obj <- BACL_taxonomy %>%
  select(MAG, BACL) %>%
  filter(MAG %in% man_mag_order) %>%
  column_to_rownames("MAG") 
  
 bacl_order <- obj[man_mag_order,] 
 
 TEXT_SIZE = 10
pheatmap(t(top50_df[,rev(bacl_order)]), cluster_cols = F, cluster_rows = F, scale = "row",  border_color = NA, fontsize_row = as.numeric(TEXT_SIZE), fontsize_col = as.numeric(TEXT_SIZE), annotation_col = rev(ann_col), annotation_row = ann_row,  annotation_names_row = F, annotation_names_col = F, annotation_colors = annCol, fontsize = as.numeric(TEXT_SIZE), cellheight = 9, cellwidth = 7.6, filename = "../results/figure_3_pheatmap.png", width = 6.29921, height = 8, angle_col = 90)
```

# Fig S3. Cumulative expression fraction curve

```{r}
rank_df_tpm <- cds_table %>%
  inner_join(lmo_id_date, by ="sample") %>%
  filter(filter_frac == "unfiltered") %>%
  group_by(dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  select(-t) %>%
  group_by(MAG) %>%
  summarise(sum_tpm = sum(tpm)) %>%
  ungroup() %>%
  #filter(MAG != "P1994_125_bin49") %>%
  arrange(desc(sum_tpm)) %>%
  mutate(fraction = sum_tpm/sum(sum_tpm)) %>%
  ungroup() %>%
  arrange(desc(fraction)) 

png("../results/cumulative_fraction_curve.png") 
  plot(cumsum(sort(rank_df_tpm$fraction, decreasing = T)), 
       
       ylab = "percentagee", xlab = "MAG rank index")
  abline(v = c(50), lty = c(3), col = c("red"))
dev.off()
```

# Fig S4. Composition difference and time correlation

```{r}
#Selecting the top50 MAGs
genes_and_paths_top50 <- cds_table %>% 
  inner_join(lmo_id_date, by = "sample") %>%
  dplyr::filter(filter_frac == "unfiltered") %>%
  group_by(dates, Geneid, MAG) %>% 
  summarise(counts = as.integer(mean(counts))) %>%
  ungroup() %>%
  inner_join(cds_table %>% distinct(Geneid, Length)) %>%
  group_by(MAG, dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  dplyr::select(-t) %>%
  dplyr::filter(MAG %in% top50_mags)

#Filtering out all low count samples
 
cds_table_filtered <- cds_table %>%  inner_join(lmo_id_date, by = "sample") %>% dplyr::filter(filter_frac == "unfiltered") %>% group_by(dates, MAG, Geneid) %>% summarise(counts = mean(counts)) %>% ungroup() %>% group_by(MAG, dates) %>% summarise(counts = sum(counts)) %>% ungroup() %>% dplyr::filter(counts >= 3000)

#Creating the filtering dataframe with valid dates only
genes_and_paths_top50 %>% semi_join(cds_table_filtered, by = c("MAG","dates")) -> filtered_genes_and_paths_top50

# Running the correlation
unique_mags = unique(genes_and_paths_top50$MAG)
matr = matrix(ncol=5, nrow = 50)
color_yday = colorRampPalette(rev(c("#D73027", "#FC8D59", "#FEE090", "#FFFFBF", "#E0F3F8", "#91BFDB", "#4575B4")))(366)
pch_year = c()
pch_year[2016] = 21
pch_year[2017] = 22
par(mfrow = c(8,8), mar = c(1,1,0,0))

for (i in 1:length(unique_mags)) {
  #tpm_mtr = filtered_genes_and_paths_top50 %>% filter(MAG==unique_mags[i]) %>% select(Geneid, dates, tpm) %>% spread(dates, tpm, fill = 0)
  count_mtr = filtered_genes_and_paths_top50 %>% dplyr::filter(MAG==unique_mags[i]) %>% dplyr::select(Geneid, dates, counts) %>% spread(dates, counts, fill = 0)
  count_mtr = as.data.frame(count_mtr)
  if (ncol(count_mtr) < 6) { next } # at least five samples to be included
  rownames(count_mtr) = count_mtr[,1]
  count_mtr = as.matrix(count_mtr[,2:ncol(count_mtr)])
  count_mtr = t(rrarefy(t(count_mtr), 3000))
  
  dates = colnames(count_mtr)
  dist = as.matrix(PoissonDistance(t(round(count_mtr)))$dd)
  colnames(dist) = rownames(dist) = dates
  
  season_dist = dist
  yday = yday(dates)
  for (j in 1:length(dates)) {
    for (k in 1:length(dates)) {
      if (abs(yday[j] - yday[k]) < 366/2) {
        season_dist[j,k] = abs(yday[j] - yday[k])
      } else {
        season_dist[j,k] = 366 - abs(yday[j] - yday[k])
      }
    }
  }
  
  matr[i,1] = length(dates) # number of samples
  matr[i,2] = sum(count_mtr) # sum of counts
  matr[i,3] = cor.test(as.dist(season_dist), as.dist(dist))$est
  matr[i,4] = cor.test(as.dist(season_dist), as.dist(dist))$p.val
  matr[i,5] = unique_mags[i]
  if (matr[i,4] < 0.01) { # only plotting those with p.val < 0.01 here
    pcoa <- pcoa(dist, correction = "cailliez")
    xlab = paste("PC1 (", 100*round(pcoa$values[1,3], 2), "%)", sep = "")
    ylab = paste("PC2 (", 100*round(pcoa$values[2,3], 2), "%)", sep = "")
     main=unique_mags[i]
    plot(pcoa$vectors[,1], pcoa$vectors[,2], cex = 1, pch = pch_year[year(dates)], bg = color_yday[yday], col = "black", xlab = xlab, ylab = ylab, main = main, axes = FALSE)
    box()
    plot(as.dist(season_dist), as.dist(dist), axes = F)
    box()
    plot(yday(dates), pcoa$vectors[,1], cex = 1, pch = pch_year[year(dates)], bg = color_yday[yday], col = "black", xlab = xlab, ylab = ylab, axes = FALSE)
  }
}

sig_mag_df <- as.data.frame(matr) %>% dplyr::rename(samples = "V1", total_counts = "V2", rho = "V3", p_value = "V4", MAG = "V5") %>%
  dplyr::filter(!is.na(.)) %>%
  dplyr::mutate(p_value_num = as.numeric(as.character(p_value))) %>%
  dplyr::mutate(Fdr = p.adjust(p_value_num, method = "fdr")) 


 #write_tsv(sig_mag_df,"../results/anders_temp_corr_mags.tsv")
  
 sig_mag_df <- read_tsv("../results/anders_temp_corr_mags.tsv")
 #Creating vector with the statistically significant MAGs
  sig_cor_mag <- sig_mag_df %>%
  filter(Fdr <= 0.05) %>%
    distinct(MAG) %>%
    .$MAG
  
 # Identifying the mags with too low samples that were excluded from analysis
  length(sig_mag_df$MAG)
  length(unique_mags)
  
  # 6 MAGs excluded due to too low sample count
excluded_mags <- setdiff(unique_mags, sig_mag_df$MAG)
```

# Table S1 - MAG expression dynamics significance, RAIN

```{r RAIN_total_tpm_and_community}
# Before the loop
all_weeks <- as.data.frame(seq(from = 1, to = 104, by = 1)) 

colnames(all_weeks) <- "week"


rain_prep <- cds_table %>%
    inner_join(lmo_id_date, by = "sample") %>%
    filter(filter_frac == "unfiltered") %>%
    group_by(dates) %>%
    mutate(t = counts/Length) %>%
    mutate(tpm = t/sum(t)*1e6) %>%
    ungroup() %>%
    select(-t) %>%
    group_by(MAG, dates) %>%
    summarise(tpm = sum(tpm)) %>%
    ungroup() %>%
    mutate(year_day = julian(dates, origin = as.Date("2016-01-01"))) %>%
    mutate(week = ceiling(year_day/7)) %>%
    select(MAG, week, tpm) %>%
    spread(MAG, tpm, fill = 0)

vec <- all_weeks %>%
  left_join(rain_prep, by = "week") %>%
  column_to_rownames("week") %>%
  replace(is.na(.), 0) %>%
  mutate(vector = ifelse(rowSums(.) > 0, 1,0)) %>%
  select(vector)

rain_prep <- rain_prep %>%
  column_to_rownames("week")

# Prep is done, now just do the rest of the stuff.

 trial_tot_rain <- rain::rain(rain_prep, deltat = 1, period = 52, nr.series = 1 , measure.sequence= vec$vector)
 
# trial_tot_rain %>%
#   mutate(fdr = p.adjust(pVal, method = "fdr")) %>%
#   rownames_to_column("MAG") %>% 
#   filter(fdr<= 0.05) %>%
#   arrange(desc(fdr)) %>%
#   write_tsv("../results/rain_mag_tpm.tsv")
 
 cyc.mags <- read_tsv("../results/rain_mag_tpm.tsv")
 
 cyc.mags %>% 
   filter(MAG %in% man_mag_order) %>% 
   view()
```

# Figure 5

```{r}
sig_mag_df <- read_tsv("../results/anders_temp_corr_mags.tsv")

sig_cor_mag <- sig_mag_df %>%
  filter(Fdr <= 0.05) %>%
    distinct(MAG) %>%
    .$MAG

for_rain <- cds_table %>%
    inner_join(lmo_id_date, by = "sample") %>%
    filter(filter_frac == "unfiltered") %>%
    filter(MAG %in% sig_cor_mag) %>%
    group_by(MAG, dates) %>%
    mutate(t = counts/Length) %>%
    mutate(tpm = t/sum(t)*1e6) %>%
    ungroup() %>%
    select(-t) %>%
    group_by(Geneid, MAG, dates) %>%
    summarise(tpm = sum(tpm)) %>%
    ungroup()

for_rain$dates <- as.Date(for_rain$dates)
filtered_genes_and_paths_top50$dates <- as.Date(filtered_genes_and_paths_top50$dates)

mag_time_points <- for_rain %>%
  mutate(year_day = julian(dates, origin = as.Date("2016-01-01"))) %>%
  filter(MAG == "P1994_122_bin236") %>%
  semi_join(filtered_genes_and_paths_top50, by = c("MAG","dates")) %>%
  #semi_join(
   # cyc.genes.tres %>%
  #filter(fdr < 0.01) %>%
  #filter(mag == "P1994_122_bin236") %>%
  #rename(MAG = "mag"), by = "Geneid" ) %>%
  select(dates, Geneid, tpm) %>%
  spread(dates, tpm, fill = 0) %>%
  column_to_rownames("Geneid") %>%
  as.matrix()

sig_cor_mag <- sig_mag_df %>%
  filter(Fdr <= 0.05) %>%
    distinct(MAG) %>%
  inner_join(BACL_taxonomy, by = "MAG") %>%
    .$BACL

for (bacl in sig_cor_mag) {
  #Extracting top700 genes
  top700 <- filtered_genes_and_paths_top50 %>%
  inner_join(BACL_taxonomy %>% select(MAG, BACL), by = "MAG") %>%
  filter(BACL == bacl) %>%
  group_by(Geneid) %>%
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  arrange(desc(tpm)) %>%
  slice(1:700) %>%
  pull(Geneid)


##magmat
magmat <- filtered_genes_and_paths_top50 %>%
  inner_join(BACL_taxonomy %>% select(MAG, BACL), by = "MAG") %>%
  filter(BACL == bacl) %>%
  filter(Geneid %in% top700) %>%
  select(dates, Geneid, tpm) %>%
  spread(dates, tpm, fill = 0) %>%
  column_to_rownames("Geneid") %>%
  as.matrix()

corr_matrix <- rcorr(as.matrix(magmat), type = "spearman")
ecol_dist = (1 - corr_matrix$r) / 2
cluster = agnes(as.dist(ecol_dist), diss = TRUE, method = "average")

hc <- as.hclust(cluster,clust = F )

cluster = agnes(magmat, diss = F, method = "average")

pheatmap(magmat[cluster$order,],  cluster_rows = F, cluster_cols = F, scale = "row", main = paste0(bacl), filename = paste0("../results/pheatmap_agnes/",bacl,".png"), width = (5*0.393701), height = (8*0.393701), show_rownames = F, fontsize = 7, angle_col = 90)
}
```

## Recursive version

```{r}
sig_bacl <- c("BACL144","BACL149","BACL3","BACL63","BACL185","BACL64")


for (bacl in sig_bacl) {

top700 <- filtered_genes_and_paths_top50 %>%
  inner_join(BACL_taxonomy %>% select(MAG, BACL), by = "MAG") %>%
  filter(BACL == bacl) %>%
  group_by(Geneid) %>%
  summarise(tpm = mean(tpm)) %>%
  ungroup() %>%
  arrange(desc(tpm)) %>%
  slice(1:700) %>%
  pull(Geneid)

magmat <- filtered_genes_and_paths_top50 %>%
  inner_join(BACL_taxonomy %>% select(MAG, BACL), by = "MAG") %>%
  filter(BACL == bacl) %>%
  filter(Geneid %in% top700) %>%
  select(dates, Geneid, tpm) %>%
  spread(dates, tpm, fill = 0) %>%
  column_to_rownames("Geneid") %>%
  as.matrix()


mag_time_points <- for_rain %>%
  mutate(year_day = julian(dates, origin = as.Date("2016-01-01"))) %>%
  inner_join(BACL_taxonomy %>% select(BACL, MAG), by = "MAG") %>%
  filter(BACL == bacl) %>%
  semi_join(filtered_genes_and_paths_top50, by = c("MAG","dates")) %>%
  select(dates, Geneid, tpm) %>%
  filter(Geneid %in% top700) %>%
  spread(dates, tpm, fill = 0)
  
write_tsv(as.data.frame(mag_time_points), paste0("../results/cluster_graphs/",paste0(bacl),".tsv"))



bin236_clust <- read_tsv(paste0("../results/cluster_graphs/",bacl,".tsv")) %>%
  column_to_rownames("Geneid")



res236 <- pheatmap(bin236_clust, cluster_cols = F, cluster_rows = T, clustering_distance_rows = "correlation", scale = "row", show_rownames = F, filename = paste0("../results/cluster_graphs/",bacl,".png"))



res236.clust <- cbind(bin236_clust, 
                      cluster = cutree(res236$tree_row, 
                                       k = 2)) %>%
  rownames_to_column("Geneid") %>%
  dplyr::select(Geneid, cluster) %>%
  mutate(BACL = bacl) %>%
  mutate(inverse_cluster = ifelse(cluster == "1", "2","1")) %>% # Changing the cluster naming to match the clustering of cluster 1 = roughly summer, 2 = winter.
  select(-cluster) %>%
  rename(cluster = "inverse_cluster")

annotation_rows <- res236.clust %>%
  column_to_rownames("Geneid") %>%
  select(-BACL)

pheatmap(bin236_clust, cluster_cols = F, cluster_rows = T, clustering_distance_rows = "correlation", scale = "row", show_rownames = F, annotation_row = annotation_rows, main = paste0(bacl), width = (9*0.393701), height = (6*0.393701), fontsize = 7, filename = paste0("../results/cluster_graphs/",bacl,"cluster",".pdf"),  treeheight_row = 1, annotation_legend = FALSE, angle_col = 90)

}
```

## Figure S2

```{r}
ALLTAX <- c("#A6CEE3","#1F78B4","#B2DF8A","#33A02C","#FB9A99","#E31A1C","#FDBF6F","#FF7F00","#CAB2D6","#6A3D9A","#FFFF99","#B15928","brown","orchid1","dodgerblue2","blue1", "yellow3","yellow4" ,"deeppink1","gold1" ,"steelblue4")
            

mags_for_plotting <- cds_table %>%
  inner_join(lmo_id_date, by ="sample") %>%
  filter(filter_frac == "unfiltered") %>%
  inner_join(BACL_taxonomy, by = "MAG") %>%
  group_by(dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = (t/sum(t))*(1e+6)) %>%
  ungroup() %>%
  group_by(dates, MAG) %>%
  summarise(counts = sum(counts), tpm = sum(tpm)) %>%
  ungroup() 


mags_for_plotting %>%
inner_join(BACL_taxonomy %>% select(MAG, BACL, Phylum), by = "MAG") %>%
mutate(BACL = str_match(BACL,"\\d+")) %>% #Removing the BACL prefix by extracting digits only
ggplot(mapping = aes(x = dates, y = tpm, group = BACL, fill = Phylum, colour = Phylum)) +
    geom_line() +
    facet_wrap(~ BACL, scales = "free_y") +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 5), axis.text.y = element_blank(), 
          axis.ticks.y = element_blank(), strip.text = element_text(size=5),
          strip.text.x = element_text(margin = margin(b = 1.5)),
          legend.position = "bottom") +
    ylab("") +
  xlab("Dates") +
   scale_fill_manual('Phylum',values = ALLTAX) +
  scale_colour_manual('Phylum',values = ALLTAX)
    ggsave("../results/all_mag_community_dynamics.pdf")
```

## Table S1

```{r}

```

## Table S2

## Table S3

## Table S4

## Figure S6

```{r}
TEXT_SIZE = 10
#P2236_101_bin9 = BACL306
#P2236_105_bin17 = BACL240

BACLs <- c("BACL13", "BACL330", "BACL187", "BACL138", "BACL322", "BACL252", "BACL306", "BACL240" )

mags_for_plotting %>%
inner_join(BACL_taxonomy, by = "MAG") %>%
filter(BACL %in% BACLs) %>%
mutate(BACL = factor(BACL, levels = c("BACL13","BACL322","BACL240","BACL252","BACL330","BACL306","BACL187","BACL138"))) %>%
#mutate(BACL = str_match(BACL,"\\d+")) %>% #Removing the BACL prefix by extracting digits only
ggplot(mapping = aes(x = dates, y = tpm, group = BACL, fill = Phylum, colour = Phylum)) +
    geom_line() +
    facet_wrap(~ BACL, scales = "free_y") +
    theme_bw() +
    theme(axis.text.x = element_text(angle = 60, hjust = 1, size = TEXT_SIZE), 
          axis.ticks.y = element_blank(), strip.text = element_text(size=TEXT_SIZE),
          strip.text.x = element_text(margin = margin(b = 1.5)),
          legend.position = "bottom",
          legend.text = element_text(size = TEXT_SIZE),
          legend.title = element_text(size = TEXT_SIZE, face ="bold"),
          axis.title = element_text(size = TEXT_SIZE)) +
    ylab("") +
  xlab("Dates")


  ggsave("../results/Daniels_BACL_dynamics.png")
```

# Figure expression dynamics top50 included and not included
```{r}

sig_cor_mag <- c("BACL234","BACL3","BACL67","BACL10","BACL75","BACL62","BACL327","BACL325","BACL1","BACL64","BACL144","BACL241","BACL16","BACL149","BACL39","BACL78","BACL347","BACL349","BACL215","BACL14","BACL185","BACL262","BACL190","BACL153","BACL11","BACL53","BACL35","BACL322","BACL63","BACL5")
# The dates included in analysis and not (for plotting shape)

class_df <- filtered_genes_and_paths_top50 %>%
  inner_join(BACL_taxonomy %>% distinct(BACL, MAG), by = "MAG") %>%
  filter(BACL %in% sig_cor_mag) %>%
  distinct(dates, MAG) %>% 
  mutate(analysis = "Included")  %>%
  mutate(dates = as.character(dates)) 


seasMags <- cds_table %>%
  inner_join(lmo_id_date, by ="sample") %>%
  filter(filter_frac == "unfiltered") %>%
  group_by(dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  select(-t) %>%
  inner_join(BACL_taxonomy %>% distinct(BACL, MAG), by = "MAG") %>%
  filter(BACL %in% sig_cor_mag) %>%
  group_by(MAG, dates) %>%
  summarise(sum_tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(dates = as.character(dates)) %>%
  left_join(class_df, by = c("MAG","dates")) %>% 
  replace_na(list(analysis = "Excluded")) %>%
  inner_join(BACL_taxonomy %>% select(MAG, BACL), by = "MAG") %>% 
  mutate(dates = as.Date(dates)) %>%
  ggplot(mapping = aes(x= dates, y = sum_tpm, shape = analysis)) +
  geom_line(aes(x = dates, y = sum_tpm, group = BACL)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~ BACL, scales = "free_y", ncol = 5) +
  theme(axis.text.y = element_text(vjust = 0.5, size = 8, angle = 60),
        axis.text.x = element_text(angle = 60, size = 8, hjust = 1),
        legend.position = "bottom", 
        legend.direction = "horizontal", 
        legend.text = element_text(size = 8),
        strip.text = element_text(size = 8),
        strip.background = element_blank()) +
  scale_shape_manual("Analysis", values=c(4, 1)) +
   scale_x_date(date_breaks = "2 months", date_labels = "%Y%b") +
  ylab("tpm") +
  xlab("Dates") +
  labs(tag = "a")

seasMags

 ggsave("../results/seasMAG_analysis_stat.png", width = 18, height = 20, units = "cm")
```

```{r}

class_df <- filtered_genes_and_paths_top50 %>%
  inner_join(BACL_taxonomy %>% distinct(BACL, MAG), by = "MAG") %>%
  filter(!BACL %in% sig_cor_mag) %>%
  distinct(dates, MAG) %>% 
  mutate(analysis = "Included")  %>%
  mutate(dates = as.character(dates)) 

nonseasMags <- cds_table %>%
  inner_join(lmo_id_date, by ="sample") %>%
  filter(filter_frac == "unfiltered") %>%
  group_by(dates) %>%
  mutate(t = counts/Length) %>%
  mutate(tpm = t/sum(t)*1e6) %>%
  ungroup() %>%
  select(-t) %>%
  inner_join(BACL_taxonomy %>% distinct(BACL, MAG), by = "MAG") %>%
  filter(MAG %in% top50_mags) %>%
  filter(!BACL %in% sig_cor_mag) %>%
  group_by(MAG, dates) %>%
  summarise(sum_tpm = sum(tpm)) %>%
  ungroup() %>%
  mutate(dates = as.character(dates)) %>%
  left_join(class_df, by = c("MAG","dates")) %>% 
  replace_na(list(analysis = "Excluded")) %>%
  inner_join(BACL_taxonomy %>% select(MAG, BACL), by = "MAG") %>% 
  mutate(dates = as.Date(dates)) %>%
  ggplot(mapping = aes(x= dates, y = sum_tpm, shape = analysis)) +
  geom_line(aes(x = dates, y = sum_tpm, group = BACL)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~ BACL, scales = "free_y") +
  theme(legend.position = "bottom", 
        legend.direction = "horizontal", 
        axis.text.y = element_text(vjust = 0.5, size = 8, angle = 60),
        axis.text.x = element_text(angle = 60, size = 8, hjust = 1),
        legend.text = element_text(size = 8),
        strip.text = element_text(size = 8),
        strip.background = element_blank()) +
  scale_shape_manual("Analysis", values=c(4, 1)) +
   scale_x_date(date_breaks = "2 months", date_labels = "%Y%b") +
  ylab("tpm") +
  xlab("Dates") +
  labs(tag = "b")

ggsave("../results/nonseasMAG_analysis_stat.png", width = 18, height = 20, units = "cm")
```

# Figure of key cluster genes
```{r}
sig_bacl <- c("BACL144","BACL149","BACL3","BACL63","BACL185","BACL64")


for (bacl in sig_bacl) {


  
#write_tsv(as.data.frame(mag_time_points), paste0("../results/cluster_graphs/",paste0(bacl),".tsv"))



bin236_clust <- read_tsv(paste0("../results/cluster_graphs/",bacl,".tsv")) %>%
  column_to_rownames("Geneid")



res236 <- pheatmap(bin236_clust, cluster_cols = F, cluster_rows = T, clustering_distance_rows = "correlation", scale = "row", show_rownames = F, filename = paste0("../results/cluster_graphs/",bacl,".png"))



resBACL.clust <- rbind(resBACL.clust,
  (cbind(bin236_clust, 
                      cluster = cutree(res236$tree_row, 
                                       k = 2)) %>%
  rownames_to_column("Geneid") %>%
  dplyr::select(Geneid, cluster) %>%
  mutate(BACL = bacl) %>%
  mutate(inverse_cluster = ifelse(cluster == "1", "2","1")) %>% # Changing the cluster naming to match the clustering of cluster 1 = roughly summer, 2 = winter.
  select(-cluster) %>%
  rename(cluster = "inverse_cluster")
))
}

cluster_genes <- resBACL.clust %>% distinct(Geneid, BACL, cluster) %>% pull(Geneid)
```

```{r}

TEXT_SIZE = 10
#Identifying interesting genes in the genes_df

genes_df <- eggnog_table %>% 
  distinct(Geneid, Predicted_protein_name) %>%
  filter(Geneid %in% cluster_genes)

IntGenes <- c("apcA","apcB","cpcA","cpcB", "atpF", "gvpA", "gvpC", "nifH", "thiC", "thiD","thiE","thiG","pstB", "pstS", "phoA", "cysH", "chlL", "katG", "amtB", "cobT", "ribD", "ribE", "ribF", "tauB", "tauC", "leuC", "acpP", "aceA", "fliC")


#PLotting the genes (facet_wrap()) and colouring them by BACL to highlight differences (line graphs)
filtered_genes_and_paths_top50 %>%
  inner_join(BACL_taxonomy %>% select(MAG, BACL), by = "MAG") %>% 
  filter(BACL %in% sig_bacl) %>%
  filter(Geneid %in% cluster_genes) %>%
  inner_join(
    eggnog_table %>% 
      distinct(Geneid, Predicted_protein_name),
    by = "Geneid"
  ) %>%
  filter(Predicted_protein_name %in% IntGenes) %>%
  mutate(Predicted_protein_name = factor(Predicted_protein_name, levels = IntGenes)) %>%
  mutate(BACL = factor(BACL, levels = c("BACL63","BACL185","BACL144","BACL149","BACL3","BACL64"))) %>%
 # mutate(Predicted_protein_name = paste0("*",Predicted_protein_name,"*")) %>%
  ggplot(mapping = aes(x = dates, y = tpm, group = Geneid, colour = BACL, fill = BACL)) +
  geom_line() +
  facet_wrap(~ Predicted_protein_name, scales = "free_y") +
  theme_classic() +
   scale_x_date(date_breaks = "3 months", date_labels = "%y%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 8, colour = "black"),
        axis.text.y = element_text(size = 8, colour = "black"),
        strip.text = element_markdown(size =8, colour = "black"),
        legend.position = "bottom",
        axis.title = element_text(size = 8, colour = "black"),
        legend.key.size = unit(0.3, 'cm'),
        plot.margin=unit(c(0.05,0.05,0.1,-0.2), "cm"),
        strip.placement = "outside",
        strip.background = element_blank()
        ) +
  xlab("Dates") +
   scale_y_continuous(label=scientific) +
  scale_color_manual('BACL', values = ALLTAX)

ggsave("../results/ecogenes_BACL_pairs.png", width = 20, height = 16, units = "cm", bg = "white")
```

## Trying a grid version
```{r}
filtered_genes_and_paths_top50 %>%
  inner_join(BACL_taxonomy %>% select(MAG, BACL), by = "MAG") %>% 
  filter(BACL %in% sig_bacl) %>%
  filter(Geneid %in% cluster_genes) %>%
  inner_join(
    eggnog_table %>% 
      distinct(Geneid, Predicted_protein_name),
    by = "Geneid"
  ) %>%
  filter(Predicted_protein_name %in% IntGenes) %>%
  mutate(Predicted_protein_name = factor(Predicted_protein_name, levels = IntGenes)) %>%
  mutate(BACL = factor(BACL, levels = c("BACL63","BACL185","BACL144","BACL149","BACL3","BACL64"))) %>%
 # mutate(Predicted_protein_name = paste0("*",Predicted_protein_name,"*")) %>%
  ggplot(mapping = aes(x = dates, y = tpm, group = Geneid)) +
  geom_line() +
  facet_grid(cols = vars(Predicted_protein_name), rows = vars(BACL), scales = "free_y") +
  theme_classic() +
   scale_x_date(date_breaks = "3 months", date_labels = "%y%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 8, colour = "black"),
        axis.text.y = element_text(size = 8, colour = "black"),
        strip.text = element_markdown(size =8, colour = "black"),
        legend.position = "bottom",
        axis.title = element_text(size = 8, colour = "black"),
        legend.key.size = unit(0.3, 'cm'),
        plot.margin=unit(c(0.05,0.05,0.1,-0.2), "cm"),
        strip.placement = "outside",
        strip.background = element_blank()
        ) +
  xlab("Dates") +
  # scale_y_continuous(label=scientific) +
  scale_color_manual('BACL', values = ALLTAX)

ggsave("../results/ecogeneGRID_rev.pdf", width = 24, height = 34, units = "cm")
```

# Operon variant
```{r}

scale28 <- c(
  "dodgerblue2", "#E31A1C", # red
  "green4",
  "#6A3D9A", # purple
  "#FF7F00", # orange
  "black", "gold1",
  "skyblue2", "#FB9A99", # lt pink
  "palegreen2",
  "#CAB2D6", # lt purple
  "#FDBF6F", # lt orange
  "gray70", "khaki2",
  "maroon", "orchid1", "deeppink1", "blue1", "steelblue4",
  "darkturquoise", "green1", "yellow4", "yellow3",
  "darkorange4", "brown", "#CAB2D6","#FFFF99", "#A6CEE3"
)

filtered_genes_and_paths_top50 %>%
  inner_join(BACL_taxonomy %>% select(MAG, BACL), by = "MAG") %>% 
  filter(BACL %in% sig_bacl) %>%
  filter(Geneid %in% cluster_genes) %>%
  inner_join(
    eggnog_table %>% 
      distinct(Geneid, Predicted_protein_name),
    by = "Geneid"
  ) %>%
  filter(Predicted_protein_name %in% IntGenes) %>%
  mutate(Predicted_protein_name = factor(Predicted_protein_name, levels = IntGenes)) %>%
  mutate(BACL = factor(BACL, levels = c("BACL63","BACL185","BACL144","BACL149","BACL3","BACL64"))) %>%
  mutate(operon = str_extract(Predicted_protein_name,"[a-z][a-z][a-z]")) %>%
 # mutate(Predicted_protein_name = paste0("*",Predicted_protein_name,"*")) %>%
  ggplot(mapping = aes(x = dates, y = tpm, group = Geneid, colour = Predicted_protein_name)) +
  geom_line() +
  facet_grid(rows = vars(operon), cols = vars(BACL), scales = "free_y") +
  theme_classic() +
   scale_x_date(date_breaks = "3 months", date_labels = "%y%b",limits = as.Date(c('2016-03-01','2017-12-12'))) +
  theme_classic() +
  theme(axis.text.x = element_text(angle = 60, hjust = 1, size = 8, colour = "black"),
        axis.text.y = element_text(size = 8, colour = "black"),
        strip.text = element_markdown(size =8, colour = "black"),
        legend.position = "bottom",
        legend.title = element_text(size = 8, face = "bold"),
        axis.title = element_text(size = 8, colour = "black"),
        legend.key.size = unit(0.3, 'cm'),
        plot.margin=unit(c(0.05,0.05,0.1,-0.2), "cm"),
        strip.placement = "outside",
        strip.background = element_blank()
        ) +
  xlab("Dates") +
  guides(colour=guide_legend(ncol=10, title.position = "top")) +
  # scale_y_continuous(label=scientific) +
  scale_color_manual('Genename', values = scale28)

ggsave("../results/EcoGenesOperon.png", width = 20, height = 25, units = "cm")
```

## Last things
```{r constants}
#| label: constants
INTERESTING_MAGS <- c(
  'BACL3',
  'BACL63',
  'BACL64',
  'BACL144',
  'BACL149',
  'BACL185'
)
WINTER_TEAM <- c(
  'BACL13',
  'BACL138',
  'BACL187',
  'BACL240',
  'BACL252',
  'BACL306',
  'BACL322',
  'BACL330'
)
ECO_GENES <- c(
  'katG', 'nifH', 'psaB', 'fliC', 'aceA', 'potC',
  'luxC', 'luxD', 'luxE', 'luxF', 'luxI', 'luxO', 'luxQ', 'luxR', 'luxS', 'luxT',
  'gldB', 'gldC', 'gldD', 'gldL', 'gldM', 'gldN',
  'glgX', 'cobS', 'cobT', 'thiG'
) %>% sort()

CLASSES_ORDERED <- taxonomy %>%
  select(domain:class) %>%
  distinct() %>%
  arrange(domain, phylum, class) %>%
  pull(class)
TNAME_ORDERED <- taxonomy %>%
  select(domain:species, tname) %>%
  distinct() %>%
  arrange(domain, phylum, class, order, family, genus, species, tname) %>%
  pull(tname)
COG_CATEGORIES <- tribble(
  ~cog_category, ~catname,
  'J', 'Translation, ribosomal structure and biogenesis',
  'A', 'RNA processing and modification',
  'K', 'Transcription',
  'L', 'Replication, recombination and repair',
  'B', 'Chromatin structure and dynamics',
  'D', 'Cell cycle control, cell division, chromosome partitioning',
  'Y', 'Nuclear structure',
  'V', 'Defense mechanisms',
  'T', 'Signal transduction mechanisms',
  'M', 'Cell wall/membrane/envelope biogenesis',
  'N', 'Cell motility',
  'Z', 'Cytoskeleton',
  'W', 'Extracellular structures',
  'U', 'Intracellular trafficking, secretion, and vesicular transport',
  'O', 'Posttranslational modification, protein turnover, chaperones',
  'C', 'Energy production and conversion',
  'G', 'Carbohydrate transport and metabolism',
  'E', 'Amino acid transport and metabolism',
  'F', 'Nucleotide transport and metabolism',
  'H', 'Coenzyme transport and metabolism',
  'I', 'Lipid transport and metabolism',
  'P', 'Inorganic ion transport and metabolism',
  'Q', 'Secondary metabolites biosynthesis, transport and catabolism',
  'R', 'General function prediction only',
  'S', 'Function unknown'
)
```

```{r sums-per-mag}
#| label: sums-per-mag

# This table is the counts table subset to timepoints at which mags reach at least 10% of its mean tpm
sums_per_mag <- counts %>%
  group_by(mag, date) %>%
  summarise(inter_tpm = sum(inter_tpm), .groups = 'drop_last') %>%
  mutate(
    min_inter_tpm = min(inter_tpm),
    median_inter_tpm = median(inter_tpm),
    mean_inter_tpm = mean(inter_tpm),
    max_inter_tpm = max(inter_tpm)
  ) %>%
  ungroup()
```


```{r}
cds_table %>%
  inner_join(lmo_id_date, by = "sample") %>%
  filter(filter_frac == "unfiltered") %>%
    group_by(dates) %>%
    mutate(t = counts/Length) %>%
    mutate(tpm = t/sum(t)*1e6) %>%
    ungroup() %>%
    select(-t) %>%
    inner_join(BACL_taxonomy, by = "MAG")
```

```{r fig-top6-sign-cogcats}
#| label: fig-top6-sign-cogcats
#| fig-cap: '**Expression by functional category for the six most abundant significantly seasonal MAGs.** Expression values relative to each MAG''s total expression. Only the twelve most highly expressed categories, except "Function unknown" shown.'
#| fig-height: 8
#| cache: false

counts <- cds_table %>%
  rename_with(str_to_lower) %>%
  inner_join(lmo_id_date, by = "sample") %>%
  filter(filter_frac == "unfiltered") %>%
  rename(count = counts) %>%
  # Pool counts
  group_by(dates, mag, geneid, length) %>%
  summarise(count = sum(count), .groups = 'drop') %>%
  # Calculate inter-tpms by first taking the ratio of counts to length, then the ratio of that to the total
  mutate(r = count/length) %>%
  group_by(dates) %>%
  mutate(inter_tpm = r/sum(r) * 1e6) %>%
  # Calculate intra_tpms similarly, but grouping also over mag
  group_by(dates, mag) %>%
  mutate(intra_tpm = r/sum(r) * 1e6) %>%
  ungroup()

BACL_taxonomy <- read_tsv('../data/BACL_identities.tsv.gz', show_col_types = FALSE) %>%
  rename_with(str_to_lower) %>%
  mutate(taxonomy = str_remove_all(taxonomy, '[a-z]__')) %>%
  separate(
    taxonomy, 
    c('domain', 'phylum', 'class', 'order', 'family', 'genus', 'species'), 
    fill = 'right',
    sep = ';'
  ) %>%
  mutate(
    taxon = case_when(
      !is.na(species) & species != '' & ! str_detect(species, '[-0-9]') ~ species,
      !is.na(genus)   & genus   != '' & ! str_detect(genus, '[-0-9]') ~ genus,
      !is.na(family)  & family  != '' & ! str_detect(family, '[-0-9]') ~ family,
      !is.na(order)   & order   != '' & ! str_detect(order, '[-0-9]') ~ order,
      !is.na(class)   & class   != '' & ! str_detect(class, '[-0-9]') ~ class,
      !is.na(phylum)  & phylum  != '' & ! str_detect(phylum, '[-0-9]') ~ phylum,
      TRUE                            ~ domain
    )
  ) %>%
  mutate(tname = sprintf("%s %s", taxon, bacl))
         
TNAME_ORDERED <- BACL_taxonomy %>%
  select(domain:species, tname) %>%
  distinct() %>%
  arrange(domain, phylum, class, order, family, genus, species, tname) %>%
  pull(tname)

t <- BACL_taxonomy %>%
  filter(bacl %in% INTERESTING_MAGS) %>%
  inner_join(
    eggnog_table %>% 
      rename(mag = "MAG", geneid = "Geneid") %>%
      distinct(mag, geneid, COG_Functional_Category) %>% 
      filter(COG_Functional_Category != '-') %>%
      separate_rows(COG_Functional_Category, sep = '') %>%
      filter(COG_Functional_Category != '', COG_Functional_Category != 'S'),
    by = "mag"
  ) %>%
  #rename(mag = "mag", geneid = "Geneid") %>%
  inner_join(counts %>% select(-length), by = c("mag", "geneid"), relationship = 'many-to-many') %>%
  rename(cog_category = "COG_Functional_Category") %>%
  group_by(tname, dates, cog_category) %>%
  summarise(intra_tpm = sum(intra_tpm), .groups = 'drop') %>%
  inner_join(COG_CATEGORIES, by = "cog_category") %>%
  mutate(tname = factor(tname, levels = TNAME_ORDERED, ordered = TRUE))

# Subset to top 10 categories and plot
t %>%
  semi_join(
    t %>%
      group_by(cog_category, tname) %>%
      summarise(intra_tpm = mean(intra_tpm), .groups = 'drop_last') %>%
      summarise(intra_tpm = mean(intra_tpm)) %>%
      slice_max(order_by = intra_tpm, n = 12) %>%
      select(-intra_tpm),
    by = "cog_category"
  ) %>%
  #mutate(catname = str_sub(catname, 1, 50)) %>%
 # mutate(catname = ifelse(catname == 'Posttranslational modification, protein turnover, chaperones',
                       #   paste0("Posttranslational modification, protein turnover \n chaperones"), 
                        #  paste0(catname))) %>%
  ggplot(aes(x = dates, y = intra_tpm, fill = catname, group = catname)) +
  geom_area() +
  scale_fill_brewer('COG category', palette = 'Paired') +
  scale_x_date(
    breaks = function(x) seq.Date(from = min(x), to = max(x), by = "2 months")
  ) +
  facet_wrap(~tname, ncol = 2) +
  xlab('') + ylab('') +
  theme(
    axis.text.x = element_text(angle = 65, hjust = 1),
    legend.position = "bottom",
    legend.key.width = unit(0.2,"cm"), 
    legend.key.height = unit(0.3, "cm"),
    legend.box.spacing = unit(-0.5, "mm"),
    legend.box.margin = margin(0,0,0,-21)
  ) +
  guides(fill = guide_legend(ncol = 2, title.position = "top")) 

ggsave("../results/COG_cats.png", width = 16, height = 24, units = "cm", bg = "white")
```
